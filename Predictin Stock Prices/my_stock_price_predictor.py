# -*- coding: utf-8 -*-
"""My Stock Price Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tHs_9dCv97j8MI1L1BrBUVxY6zijekNm
"""

import math
import pandas as pd
import numpy as np
import pandas_datareader as pdr
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#df = pdr.DataReader('APPL ', data_source='yahoo', start='2012-01-01', end='2021-04-18')
#df

df1 = pdr.DataReader("RELIANCE.NS", 
                       start='2015-1-1', 
                       end='2021-4-19', 
                       data_source='yahoo')

df1

#url = 'C:/Users/aloks/Documents/Personal/Development/ML/Data Science/Predictin Stock Prices/Data/RELIANCE.csv'
#df1 = pd.read_csv(url)
#df1



plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df1['Close'])
plt.xlabel('Date', fontsize =18)
plt.ylabel('LTP(INR)', fontsize =18)
plt.show()

#create a new data frame with close column

data = df1.filter(['Close'])

#convert dataframe to numpy array
dataset = data.values

#get number of rows to train the model on
training_data_len = math.ceil(len(dataset)* .8)

training_data_len

#Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#create trainign data set
#create scaled training data set
train_data = scaled_data[0:training_data_len, :]

x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

    if i<=61:
        print(x_train)
        print(y_train)
        print()

#convert x_train & y_train to numpy arrays

x_train, y_train = np.array(x_train), np.array(y_train)

#Reshape the data
x_train.shape

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#build model

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile model
model.compile(optimizer='adam', loss='mean_squared_error')

#train

model.fit(x_train, y_train, batch_size=1, epochs=1)

#create testing dataset
#create a new array containing scaled values from index 1180 to 1550

test_data = scaled_data[training_data_len - 60: , :]

#create the data sets x_test & y_test

x_test=[]
y_test = dataset[training_data_len: , :]
for i in range (60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert the data to a numpy array

x_test = np.array(x_test)
x_test.shape

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
x_test

#Get teh model predicted price values

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get root mean square error(RMSE)

rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

#plot the data

train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#visualise the data

plt.figure(figsize=(18,12))
plt.title('Model')
plt.xlabel('Date', fontsize =18)
plt.ylabel('LTP', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show()

#show the valid actual price & predicted price

valid

#get the quote
reliance_quote = pdr.DataReader("RELIANCE.NS", start='2015-1-1', end='2021-4-15', data_source='yahoo')

#create a new data frame
new_df = reliance_quote.filter(['Close'])

#Get last 60 days closing price values and convert the dataframe to array
last60_days = new_df[-60:].values

#scale the data to be values between 0 & 1
last60_days_scaled = scaler.transform(last60_days)

#create empty list
X_test = []

#append
X_test.append(last60_days_scaled)

#convert X_test to numpy array
X_test = np.array(X_test)

#reshape to 3d
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

#prediction
pred_price = model.predict(X_test)

#undo scaling
pred_price = scaler.inverse_transform(pred_price)

print(pred_price)

reliance_quote2 = pdr.DataReader("RELIANCE.NS", start='2021-4-15', end='2021-4-19', data_source='yahoo')
print(reliance_quote2['Close'])

